-- 依存関係のあるテーブルを先に削除
drop table if exists public.goals cascade;
drop table if exists public.boards cascade;
drop table if exists public.profiles cascade;

-- トリガーとファンクションの削除
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists public.handle_new_user();

-- プロフィールテーブル
create table public.profiles (
  id uuid references auth.users on delete cascade primary key,
  username text,
  avatar_url text,
  updated_at timestamptz default timezone('utc'::text, now())
);

-- 看板テーブル
create table public.boards (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  title text not null,
  parent_goal_id bigint,  -- 外部キー制約は後で追加
  created_at timestamptz default timezone('utc'::text, now()) not null
);

-- 目標テーブル
create table public.goals (
  id bigint generated by default as identity primary key,
  user_id uuid references public.profiles on delete cascade not null,
  title text not null,
  description text,
  type text check (type in ('big', 'medium', 'small')) not null,
  status text check (status in ('todo', 'doing', 'done')) not null,
  board_id bigint references public.boards on delete cascade,
  color text,
  created_at timestamptz default timezone('utc'::text, now()) not null,
  updated_at timestamptz default timezone('utc'::text, now()) not null
);

-- 外部キー制約の追加
alter table public.boards
  add constraint boards_parent_goal_id_fkey
  foreign key (parent_goal_id)
  references public.goals(id)
  on delete cascade;

-- RLSの設定
alter table public.profiles enable row level security;
alter table public.boards enable row level security;
alter table public.goals enable row level security;

-- 既存のポリシーを削除
drop policy if exists "Public profiles are viewable by everyone." on public.profiles;
drop policy if exists "Users can insert their own profile." on public.profiles;
drop policy if exists "Users can update own profile." on public.profiles;

-- トリガーとファンクションの再作成
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists public.handle_new_user();

create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  -- より詳細なデバッグログ
  raise notice 'handle_new_user: starting for user ID=% Email=%', new.id, new.email;
  raise notice 'handle_new_user: raw_user_meta_data=%', new.raw_user_meta_data;

  insert into public.profiles (id, username)
  values (
    new.id,
    coalesce(
      new.raw_user_meta_data->>'username',
      'user_' || substr(new.id::text, 1, 8)
    )
  );

  raise notice 'handle_new_user: profile created for user ID=%', new.id;
  return new;
exception
  when others then
    raise warning 'handle_new_user error: % %', SQLERRM, SQLSTATE;
    return new;
end;
$$;

-- トリガーの再作成
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute function public.handle_new_user();

-- ポリシーの再作成
create policy "Public profiles are viewable by everyone."
  on public.profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on public.profiles for insert
  with check ( true );

create policy "Users can update own profile."
  on public.profiles for update
  using ( auth.uid() = id );